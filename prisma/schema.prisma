// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String   @id @default(auto()) @db.ObjectId @map("_id")  // Use auto-generated MongoDB ObjectId
  userId             String   @db.ObjectId// Reference to User
  provider           String   // OAuth provider (e.g., "google")
  providerAccountId  String   // Unique identifier from the provider
  refresh_token      String?  // Optional refresh token
  access_token       String?  // Optional access token
  expires_at         Int?     // Optional expiration timestamp
  token_type         String?  // Optional token type
  type                String?
  scope              String?  // Optional scope
  id_token           String?  // Optional ID token
  session_state      String?  // Optional session state

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])  // Composite unique constraint
}

model Session {
  id           String   @id @default(auto()) @db.ObjectId @map("_id")  // Use auto-generated MongoDB ObjectId
  sessionToken String   @unique  // Unique session token
  userId       String   @db.ObjectId   // Reference to User
  expires      DateTime // Session expiration time

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model User {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?  @unique
  password String?
  role      Role     @default(USER)
  emailVerified DateTime?
  image         String?
  semaphoreKey SemaphoreKey?
  number    String?
  minibuses MiniBus[]
  companyName String?
  companyAddress  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accounts      Account[]
  sessions      Session[]

  device Device[]
}

model SemaphoreKey {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId @unique
  user    User @relation(fields: [userId], references: [id])
  key     String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  OPERATOR
  USER
}

model MiniBus {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  plateNumber   String   @unique
  model         String?
  driver        String?
  conductor     String?
  capacity      Int
  ownerId       String @db.ObjectId
  owner         User     @relation(fields: [ownerId], references: [id])
  device        Device?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Alert Alert[]
}

model Device {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name        String
  deviceId    String @unique
  gpsTopic   String
  emergencyTopic   String
  battLevelTopic   String?
  accelTopic   String?
  userId      String? @db.ObjectId
  user        User? @relation(fields: [userId], references: [id])
  busId       String? @db.ObjectId @unique
  assignedBus MiniBus? @relation(fields: [busId], references: [id])
  gpsData     GPSData[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model GPSData {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  devId       String
  device      Device  @relation(fields: [devId], references: [deviceId])
  lat    Float
  lon   Float
  speed       Float    @default(0) // In km/h
  direction   Float    @default(0) // Angle in degrees
  altitude   Float    @default(0) // Angle in degrees
  timestamp   DateTime @default(now()) // MQTT timestamp
}

model Trip {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  busId       String @db.ObjectId
  routeId     String @db.ObjectId
  route      Route @relation(fields: [routeId], references: [id])
  direction   TripDirection
  status      TripStatus @default(ONGOING)
  startTime   DateTime?
  endTime     DateTime?
  lastUpdate  DateTime @default(now())

  startLatitude  Float
  startLongitude Float
  endLatitude    Float
  endLongitude   Float
}

enum TripDirection {
  FORWARD   // San Isidro → Litex
  REVERSE   // Litex → San Isidro
}

enum TripStatus {
  NOT_STARTED
  ONGOING
  COMPLETED
  CANCELLED
}

model Route {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name        String
  waypoints   Json // Stores an array of lat/lng points
  createdAt   DateTime @default(now())

  Trip Trip[]
}

model Alert {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  busId       String @db.ObjectId
  bus         MiniBus  @relation(fields: [busId], references: [id])
  type        AlertType
  lat         String?
  long        String?
  message     String
  timestamp   DateTime @default(now())
}

enum AlertType {
  GEOFENCE_BREACH
  OVERSPEEDING
  EMERGENCY
}

model PushSubscription {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  endpoint  String   @unique
  keys      Json     // Store `keys` object here (auth, p256dh)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}